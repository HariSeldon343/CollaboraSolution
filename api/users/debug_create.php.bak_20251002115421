<?php
/**
 * Debug endpoint per analizzare le richieste di creazione utenti
 * Mostra esattamente cosa viene ricevuto dal form
 */

// Disabilita output errori
ini_set('display_errors', '0');
error_reporting(E_ALL);

// Pulizia output
while (ob_get_level()) ob_end_clean();
ob_start();

// Headers
header('Content-Type: application/json; charset=utf-8');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: POST');

// Funzione output JSON
function jsonOut($data, $code = 200) {
    while (ob_get_level()) ob_end_clean();
    http_response_code($code);
    header('Content-Type: application/json; charset=utf-8');
    die(json_encode($data, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT));
}

try {
    // Gestione sessione
    if (session_status() === PHP_SESSION_NONE) {
        session_name('COLLAB_SID');
        session_start();
    }

    // Raccogli tutti i dati di input possibili
    $debugInfo = [
        'request_method' => $_SERVER['REQUEST_METHOD'],
        'content_type' => $_SERVER['CONTENT_TYPE'] ?? 'not set',
        'post_data' => $_POST,
        'get_data' => $_GET,
        'raw_input' => file_get_contents('php://input'),
        'session_data' => [
            'user_id' => $_SESSION['user_id'] ?? 'not set',
            'tenant_id' => $_SESSION['tenant_id'] ?? 'not set',
            'role' => $_SESSION['role'] ?? 'not set',
            'csrf_token' => $_SESSION['csrf_token'] ?? 'not set'
        ],
        'headers' => getallheaders(),
        'files' => $_FILES
    ];

    // Prova a decodificare JSON se presente
    if (!empty($debugInfo['raw_input'])) {
        $jsonData = json_decode($debugInfo['raw_input'], true);
        if (json_last_error() === JSON_ERROR_NONE) {
            $debugInfo['json_decoded'] = $jsonData;
        } else {
            $debugInfo['json_error'] = json_last_error_msg();
        }
    }

    // Analizza i campi ricevuti
    $allFields = array_merge(
        $_POST,
        $jsonData ?? [],
        $_GET
    );

    $debugInfo['all_fields'] = $allFields;

    // Verifica campi richiesti
    $requiredFields = ['first_name', 'last_name', 'email', 'role'];
    $missingFields = [];
    $presentFields = [];

    foreach ($requiredFields as $field) {
        if (empty($allFields[$field])) {
            $missingFields[] = $field;
        } else {
            $presentFields[$field] = $allFields[$field];
        }
    }

    $debugInfo['field_analysis'] = [
        'required_fields' => $requiredFields,
        'missing_fields' => $missingFields,
        'present_fields' => $presentFields
    ];

    // Analizza tenant in base al ruolo
    if (!empty($allFields['role'])) {
        $role = $allFields['role'];
        $debugInfo['role_analysis'] = [
            'role' => $role,
            'tenant_id' => $allFields['tenant_id'] ?? 'not provided',
            'tenant_ids' => $allFields['tenant_ids'] ?? 'not provided'
        ];

        switch ($role) {
            case 'super_admin':
                $debugInfo['role_analysis']['expected'] = 'No tenant_id required';
                break;
            case 'admin':
                $debugInfo['role_analysis']['expected'] = 'tenant_ids[] array required';
                break;
            case 'manager':
            case 'user':
                $debugInfo['role_analysis']['expected'] = 'Single tenant_id required';
                break;
        }
    }

    // CSRF token analysis
    $csrfReceived = $allFields['csrf_token'] ?? $_SERVER['HTTP_X_CSRF_TOKEN'] ?? 'not provided';
    $csrfSession = $_SESSION['csrf_token'] ?? 'not set';

    $debugInfo['csrf_analysis'] = [
        'received' => $csrfReceived,
        'session' => $csrfSession,
        'match' => ($csrfReceived === $csrfSession) ? 'YES' : 'NO'
    ];

    // Log to file for server-side debugging
    $logFile = __DIR__ . '/../../logs/debug_create_' . date('Y-m-d_H-i-s') . '.json';
    $logDir = dirname($logFile);
    if (!is_dir($logDir)) {
        mkdir($logDir, 0777, true);
    }
    file_put_contents($logFile, json_encode($debugInfo, JSON_PRETTY_PRINT));

    $debugInfo['log_file'] = $logFile;

    // Return all debug info
    jsonOut([
        'success' => false,
        'message' => 'Debug mode - no user created',
        'debug' => $debugInfo,
        'timestamp' => date('Y-m-d H:i:s')
    ], 200);

} catch (Exception $e) {
    jsonOut([
        'success' => false,
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
    ], 500);
}