        this.attachEventListeners();
        this.loadTickets();
        this.loadStats();

        // Auto-refresh every 60 seconds
        setInterval(() => {
            this.loadTickets();
            this.loadStats();
        }, 60000);
    }

    /**
     * Attach event listeners to UI elements
     */
    attachEventListeners() {
        // Create ticket button
        const createBtn = document.getElementById('createTicketBtn');
        if (createBtn) {
            createBtn.addEventListener('click', () => this.showCreateModal());
        }

        // Filter controls
        const statusFilter = document.getElementById('statusFilter');
        if (statusFilter) {
            statusFilter.addEventListener('change', (e) => {
                this.state.filters.status = e.target.value;
                this.state.pagination.page = 1;
                this.loadTickets();
            });
        }

        const categoryFilter = document.getElementById('categoryFilter');
        if (categoryFilter) {
            categoryFilter.addEventListener('change', (e) => {
                this.state.filters.category = e.target.value;
                this.state.pagination.page = 1;
                this.loadTickets();
            });
        }

        const urgencyFilter = document.getElementById('urgencyFilter');
        if (urgencyFilter) {
            urgencyFilter.addEventListener('change', (e) => {
                this.state.filters.urgency = e.target.value;
                this.state.pagination.page = 1;
                this.loadTickets();
            });
        }

        // Search
        const searchInput = document.getElementById('ticketSearch');
        if (searchInput) {
            let searchTimeout;
            searchInput.addEventListener('input', (e) => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => {
                    this.state.filters.search = e.target.value;
                    this.state.pagination.page = 1;
                    this.loadTickets();
                }, 500);
            });
        }

        // Modal close buttons
        const closeButtons = document.querySelectorAll('[data-dismiss="modal"]');
        closeButtons.forEach(btn => {
            btn.addEventListener('click', () => this.closeModals());
        });

        // Escape key to close modals
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.closeModals();
            }
        });
    }

    /**
     * Load tickets from API
     */
    async loadTickets() {
        try {
            const params = new URLSearchParams({
                page: this.state.pagination.page,
                limit: this.state.pagination.limit
            });

            // Add filters
            if (this.state.filters.status !== 'all') {
                params.append('status', this.state.filters.status);
            }
            if (this.state.filters.category !== 'all') {
                params.append('category', this.state.filters.category);
            }
            if (this.state.filters.urgency !== 'all') {
                params.append('urgency', this.state.filters.urgency);
            }
            if (this.state.filters.search) {
                params.append('search', this.state.filters.search);
            }

            const response = await fetch(`${this.apiBase}/list.php?${params}`, {
                headers: {
                    'X-CSRF-Token': this.state.csrfToken
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const data = await response.json();

            if (!data.success) {
                throw new Error(data.error || 'Failed to load tickets');
            }

            // BUG-022 compliant: Extract array from nested structure
            this.state.tickets = data.data?.tickets || [];
            this.state.pagination = data.data?.pagination || this.state.pagination;

            console.log('[TicketManager] Loaded tickets:', this.state.tickets.length);

            this.renderTickets();

        } catch (error) {
            console.error('[TicketManager] Load error:', error);
            this.showToast('Errore nel caricamento dei ticket', 'error');
        }
    }

    /**
     * Load dashboard statistics
     */
    async loadStats() {
        try {
            const response = await fetch(`${this.apiBase}/stats.php`, {
                headers: {
                    'X-CSRF-Token': this.state.csrfToken
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const data = await response.json();

            if (data.success) {
                this.state.stats = data.data;
                this.renderStats();
            }

        } catch (error) {
            console.error('[TicketManager] Stats error:', error);
        }
    }

    /**
     * Render tickets table/cards
     */
    renderTickets() {
        const container = document.getElementById('ticketsContainer');
        if (!container) return;

        if (this.state.tickets.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">ðŸ“­</div>
                    <h3>Nessun ticket trovato</h3>
                    <p>Nessun ticket corrisponde ai filtri selezionati.</p>
                </div>
            `;
            return;
        }

        const ticketsHTML = this.state.tickets.map(ticket => `
            <div class="ticket-card" data-ticket-id="${ticket.id}">
                <div class="ticket-card-header">
                    <span class="ticket-number">#${ticket.ticket_number}</span>
                    ${this.renderUrgencyBadge(ticket.urgency)}
                    ${this.renderStatusBadge(ticket.status)}
                </div>
                <div class="ticket-card-body">
                    <h3 class="ticket-title">${this.escapeHtml(ticket.subject)}</h3>
                    <p class="ticket-excerpt">${this.truncate(ticket.description, 150)}</p>
                    <div class="ticket-meta">
                        <span class="meta-item">
                            <i class="fas fa-user"></i> ${this.escapeHtml(ticket.created_by_name)}
                        </span>
                        <span class="meta-item">
                            <i class="fas fa-calendar"></i> ${this.formatDate(ticket.created_at)}
                        </span>
                        <span class="meta-item">
                            <i class="fas fa-comments"></i> ${ticket.response_count || 0} risposte
                        </span>
                    </div>
                </div>
                <div class="ticket-card-footer">
                    <button class="btn btn-sm btn-primary" onclick="ticketManager.viewTicket(${ticket.id})">
                        Visualizza
                    </button>
                </div>
            </div>
        `).join('');

        container.innerHTML = ticketsHTML;
        this.renderPagination();
    }

    /**
     * Render statistics dashboard
     */
    renderStats() {
        if (!this.state.stats.summary) return;

        const { summary } = this.state.stats;

        // Update stat cards
        this.updateStatCard('totalTickets', summary.total);
        this.updateStatCard('openTickets', summary.open);
        this.updateStatCard('resolvedTickets', summary.resolved);
        this.updateStatCard('closedTickets', summary.closed);
    }

    /**
     * Update individual stat card
     */
    updateStatCard(id, value) {
        const elem = document.getElementById(id);
        if (elem) {
            elem.textContent = value;
        }
    }

    /**
     * Show create ticket modal
     */
    showCreateModal() {
        const modal = document.getElementById('createTicketModal');
        if (modal) {
            modal.classList.add('show');
            modal.style.display = 'block';

            // Reset form
            const form = document.getElementById('createTicketForm');
            if (form) {
                form.reset();
            }
        }
    }

    /**
     * Create new ticket
     */
    async createTicket(formData) {
        try {
            const response = await fetch(`${this.apiBase}/create.php`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': this.state.csrfToken
                },
                body: JSON.stringify(formData)
            });

            const data = await response.json();

            if (!data.success) {
                throw new Error(data.error || 'Failed to create ticket');
            }

            this.showToast('Ticket creato con successo', 'success');
            this.closeModals();
            this.loadTickets();
            this.loadStats();

            return data.data.ticket;

        } catch (error) {
            console.error('[TicketManager] Create error:', error);
            this.showToast(error.message, 'error');
            throw error;
        }
    }

    /**
     * View ticket details
     */
    async viewTicket(ticketId) {
        try {
            const response = await fetch(`${this.apiBase}/get.php?ticket_id=${ticketId}`, {
                headers: {
                    'X-CSRF-Token': this.state.csrfToken
                }
            });

            const data = await response.json();

            if (!data.success) {
                throw new Error(data.error || 'Failed to load ticket');
            }

            this.state.currentTicket = data.data.ticket;
            this.showTicketModal(data.data);

        } catch (error) {
            console.error('[TicketManager] View error:', error);
            this.showToast(error.message, 'error');
        }
    }

    /**
     * Show ticket detail modal
     */
    showTicketModal(ticketData) {
        // Navigate to ticket detail page instead of modal
        window.location.href = `/ticket.php?id=${ticketData.ticket.id}`;
    }

    /**
     * Add response to ticket
     */
    async addResponse(ticketId, responseText, isInternalNote = false) {
        try {
            const response = await fetch(`${this.apiBase}/respond.php`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': this.state.csrfToken
                },
                body: JSON.stringify({
                    ticket_id: ticketId,
                    response_text: responseText,
                    is_internal_note: isInternalNote
                })
            });

            const data = await response.json();

            if (!data.success) {
                throw new Error(data.error || 'Failed to add response');
            }

            this.showToast('Risposta aggiunta con successo', 'success');
            this.viewTicket(ticketId); // Reload ticket

            return data.data.response;

        } catch (error) {
            console.error('[TicketManager] Response error:', error);
            this.showToast(error.message, 'error');
            throw error;
        }
    }

    /**
     * Close all modals
     */
    closeModals() {
        const modals = document.querySelectorAll('.modal');
        modals.forEach(modal => {
            modal.classList.remove('show');
            modal.style.display = 'none';
        });
    }

    /**
     * Show toast notification
     */
    showToast(message, type = 'info') {
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.textContent = message;

        document.body.appendChild(toast);

        setTimeout(() => {
            toast.classList.add('show');
        }, 100);

        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => toast.remove(), 300);
        }, 5000);
    }

    /**
     * Render pagination controls
     */
    renderPagination() {
        const container = document.getElementById('paginationContainer');
        if (!container) return;

        const { page, total_pages, has_prev, has_next } = this.state.pagination;

        if (total_pages <= 1) {
            container.innerHTML = '';
            return;
        }

        container.innerHTML = `
            <button class="btn btn-sm" ${!has_prev ? 'disabled' : ''}
                    onclick="ticketManager.goToPage(${page - 1})">
                <i class="fas fa-chevron-left"></i> Precedente
            </button>
            <span>Pagina ${page} di ${total_pages}</span>
            <button class="btn btn-sm" ${!has_next ? 'disabled' : ''}
                    onclick="ticketManager.goToPage(${page + 1})">
                Successiva <i class="fas fa-chevron-right"></i>
            </button>
        `;
    }

    /**
     * Navigate to specific page
     */
    goToPage(page) {
        this.state.pagination.page = page;
        this.loadTickets();
    }

    /**
     * Utility: Render urgency badge
     */
    renderUrgencyBadge(urgency) {
        const colors = {
            low: 'success',
            normal: 'warning',
            high: 'danger',
            critical: 'danger'
        };
        const labels = {
            low: 'Bassa',
            normal: 'Normale',
            high: 'Alta',
            critical: 'Critica'
        };

        return `<span class="badge badge-${colors[urgency]}">${labels[urgency]}</span>`;
    }

    /**
     * Utility: Render status badge
     */
    renderStatusBadge(status) {
        const colors = {
            open: 'primary',
            in_progress: 'info',
            waiting_response: 'secondary',
            resolved: 'success',
            closed: 'dark'
        };
        const labels = {
            open: 'Aperto',
            in_progress: 'In Lavorazione',
            waiting_response: 'In Attesa',
            resolved: 'Risolto',
            closed: 'Chiuso'
        };

        return `<span class="badge badge-${colors[status]}">${labels[status]}</span>`;
    }

    /**
     * Utility: Escape HTML
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    /**
     * Utility: Truncate text
     */
    truncate(text, length) {
        if (!text) return '';
        if (text.length <= length) return this.escapeHtml(text);
        return this.escapeHtml(text.substring(0, length)) + '...';
    }

    /**
     * Utility: Format date
     */
    formatDate(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));

        if (diffDays === 0) return 'Oggi';
        if (diffDays === 1) return 'Ieri';
        if (diffDays < 7) return `${diffDays} giorni fa`;

        return date.toLocaleDateString('it-IT');
    }
}

// Initialize when DOM is ready
let ticketManager;
document.addEventListener('DOMContentLoaded', () => {
    ticketManager = new TicketManager();
});

